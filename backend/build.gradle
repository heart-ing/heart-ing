plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
}

group = 'com.chillin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.code.gson:gson:2.10.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // annotationProcessor
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //s3
    implementation "com.amazonaws:aws-java-sdk-s3:1.12.281"

    // Data JPA Test
    testImplementation 'com.h2database:h2'

    //  help make parsing to json easier
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // twitter
    implementation group: 'org.springframework.social', name: 'spring-social-twitter', version: '1.1.2.RELEASE'


}

tasks.named('test') {
    useJUnitPlatform()
}

def    jacocoExcludes = [
        '**/config/*',
        '**/exception/*',
        '**/request/*',
        '**/response/*',
        '**/data/*',
        '**/oauth/*',
        '**/jwt/*',
        'Hearting*',
        'OAuth*',

]

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        excludes = jacocoExcludes
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        //dto 및 외부 연동 서비스는 테스트에서 제외
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)})
        )
    }
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.50
//            }

            // 라인 커버리지를 최소한 80% 만족시켜야 합니다.
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.10
//            }

            excludes = jacocoExcludes
        }
    }
}